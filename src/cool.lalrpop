use crate::parsing::token::{Token, LexicalError};
use crate::ast::{Expr, TypedExpr, Program, Class, Feature, ArgDecl, CaseBranch};
use crate::ast::{ComparisonOperator, MathOperator, UnaryOperator};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        ";"           => Token::Semicolon,
        ":"           => Token::Colon,
        "class"       => Token::Class_,
        "typeid"      => Token::Typeid(<String>),
        "objectid"    => Token::Objectid(<String>),
        "bool_const"  => Token::BoolConst(<bool>),
        "int_const"   => Token::IntConst(<String>),
        // Now `StrConst(<String>)` instead of a Result
        "str_const"   => Token::StrConst(<String>),
        "{"           => Token::Lbrace,
        "}"           => Token::Rbrace,
        "("           => Token::Lparen,
        ")"           => Token::Rparen,
        "<-"          => Token::Assign,
        ","           => Token::Comma,
        "new"         => Token::New,
        "if"          => Token::If,
        "then"        => Token::Then,
        "else"        => Token::Else,
        "fi"          => Token::Fi,
        "of"          => Token::Of,
        "while"       => Token::While,
        "inherits"    => Token::Inherits,
        "loop"        => Token::Loop,
        "pool"        => Token::Pool,
        "."           => Token::Period,
        "@"           => Token::At,
        "~"           => Token::Neg,
        "isvoid"      => Token::Isvoid,
        "="           => Token::Equal,
        "<"           => Token::Lt,
        "<="          => Token::Le,
        "not"         => Token::Not,
        "+"           => Token::Plus,
        "-"           => Token::Minus,
        "*"           => Token::Mul,
        "/"           => Token::Divide,
        "let"         => Token::Let,
        "in"          => Token::In,
        "error"       => Token::Error(_),
        "case"        => Token::Case,
        "esac"        => Token::Esac,
        "=>"          => Token::Darrow,
    }
}

pub ProgramTy: Program = {
    <start:@L> <clist:ClassesTy> <end:@R> => Program::new(clist),
}

pub ClassTy: Class = {
    <start:@L> "class" <name:"typeid"> "{" <features:FeaturesTy> "}" ";" <end:@R> =>
        Class::new(name.clone(), None, features),
    <start:@L> "class" <name:"typeid"> "inherits" <parent:"typeid"> "{" <features:FeaturesTy> "}" ";" <end:@R> =>
        Class::new(name.clone(), Some(parent.clone()), features),
}

pub ClassesTy: Vec<Class> = {
    <c:ClassTy> => vec![c],
    <cs:ClassesTy> <c:ClassTy> => {
        let mut v = cs;
        v.push(c);
        v
    },
}

pub FormalTy: ArgDecl = {
    <name:"objectid"> ":" <typ:"typeid"> => ArgDecl::new(name.clone(), typ.clone()),
}

pub _SomeFormalsTy: Vec<ArgDecl> = {
    <f:FormalTy> => vec![f],
    <some:_SomeFormalsTy> "," <f:FormalTy> => {
        let mut v = some;
        v.push(f);
        v
    },
}

pub FormalsTy: Vec<ArgDecl> = {
    () => vec![],
    <some:_SomeFormalsTy> => some,
}

pub FeatureTy: Feature = {
    <start:@L> <name:"objectid"> ":" <typ:"typeid"> ";" <end:@R> => {
        Feature::new_attribute(name.clone(), typ.clone(), None)
    },
    <start:@L> <name:"objectid"> ":" <typ:"typeid"> "<-" <expr:ExprTy> ";" <end:@R> => {
        Feature::new_attribute(name.clone(), typ.clone(), Some(expr))
    },
    <start:@L> <name:"objectid"> "(" <formals:FormalsTy> ")" ":" <typ:"typeid"> "{" <expr:ExprTy> "}" ";" <end:@R> => {
        Feature::new_method(name.clone(), formals, typ.clone(), expr)
    },
}

pub FeaturesTy: Vec<Feature> = {
    () => vec![],
    <fs:FeaturesTy> <f:FeatureTy> => {
        let mut v = fs;
        v.push(f);
        v
    },
}

pub ExprTy: TypedExpr = {
    <start:@L> <mut e:Expr10Ty> <end:@R> => e,
}

pub Expr10Ty: TypedExpr = {
    <start:@L> "let" <let_bindings:LetBindingsTy> "in" <body:ExprTy> => {
        TypedExpr::new(Expr::Let(let_bindings, Box::new(body)), start)
    },
    <e:Expr9Ty> => e,
}

pub Expr9Ty: TypedExpr = {
    <start:@L> <var:"objectid"> "<-" <expr:Expr9Ty> => {
        let asign = Expr::Assignment(var.clone(), Box::new(expr));
        TypedExpr::new(asign, start)
    },
    <e:Expr8Ty> => e,
}

pub Expr8Ty: TypedExpr = {
    <start:@L> "not" <e:Expr7Ty> => {
        let u = Expr::UnaryOperation { op: UnaryOperator::Not, s: Box::new(e) };
        TypedExpr::new(u, start)
    },
    <e:Expr7Ty> => e,
}

pub Expr7Ty: TypedExpr = {
    <start:@L> <e1:Expr7Ty> "=" <e2:Expr6Ty> => {
        let cmp = Expr::Comparison { lhs: Box::new(e1), op: ComparisonOperator::Equal, rhs: Box::new(e2) };
        TypedExpr::new(cmp, start)
    },
    <start:@L> <e1:Expr7Ty> "<=" <e2:Expr6Ty> => {
        let cmp = Expr::Comparison { lhs: Box::new(e1), op: ComparisonOperator::Le, rhs: Box::new(e2) };
        TypedExpr::new(cmp, start)
    },
    <start:@L> <e1:Expr7Ty> "<" <e2:Expr6Ty> => {
        let cmp = Expr::Comparison { lhs: Box::new(e1), op: ComparisonOperator::Lt, rhs: Box::new(e2) };
        TypedExpr::new(cmp, start)
    },
    <e:Expr6Ty> => e,
}

pub Expr6Ty: TypedExpr = {
    <start:@L> <e1:Expr6Ty> "+" <e2:Expr5Ty> => {
        let m = Expr::Math { lhs: Box::new(e1), op: MathOperator::Add, rhs: Box::new(e2) };
        TypedExpr::new(m, start)
    },
    <start:@L> <e1:Expr6Ty> "-" <e2:Expr5Ty> => {
        let m = Expr::Math { lhs: Box::new(e1), op: MathOperator::Subtract, rhs: Box::new(e2) };
        TypedExpr::new(m, start)
    },
    <e:Expr5Ty> => e,
}

pub Expr5Ty: TypedExpr = {
    <start:@L> <e1:Expr5Ty> "*" <e2:Expr4Ty> => {
        let m = Expr::Math { lhs: Box::new(e1), op: MathOperator::Mul, rhs: Box::new(e2) };
        TypedExpr::new(m, start)
    },
    <start:@L> <e1:Expr5Ty> "/" <e2:Expr4Ty> => {
        let m = Expr::Math { lhs: Box::new(e1), op: MathOperator::Div, rhs: Box::new(e2) };
        TypedExpr::new(m, start)
    },
    <e:Expr4Ty> => e,
}

pub Expr4Ty: TypedExpr = {
    <start:@L> "isvoid" <expr:Expr3Ty> => {
        let iv = Expr::Isvoid(Box::new(expr));
        TypedExpr::new(iv, start)
    },
    <e:Expr3Ty> => e,
}

pub Expr3Ty: TypedExpr = {
    <start:@L> "~" <expr:Expr2Ty> => {
        let u = Expr::UnaryOperation { op: UnaryOperator::Neg, s: Box::new(expr) };
        TypedExpr::new(u, start)
    },
    <e:Expr2Ty> => e,
}

pub Expr2Ty: TypedExpr = {
    <start:@L> <slf:Expr1Ty> "@" <typ:"typeid"> "." <method_name:"objectid"> "(" <exprs:CommaSepExprsTy> ")" => {
        let dispatch = Expr::Dispatch {
            target: Some(Box::new(slf)),
            targettype: Some(typ.clone()),
            id: method_name.clone(),
            exprs,
        };
        TypedExpr::new(dispatch, start)
    },
    <start:@L> <method_name:"objectid"> "(" <exprs:CommaSepExprsTy> ")" => {
        let dispatch = Expr::Dispatch {
            target: None,
            targettype: None,
            id: method_name.clone(),
            exprs,
        };
        TypedExpr::new(dispatch, start)
    },
    <e:Expr1Ty> => e,
}

pub Expr1Ty: TypedExpr = {
    <start:@L> <slf:Expr0Ty> "." <method_name:"objectid"> "(" <exprs:CommaSepExprsTy> ")" => {
        let dispatch = Expr::Dispatch {
            target: Some(Box::new(slf)),
            targettype: None,
            id: method_name.clone(),
            exprs,
        };
        TypedExpr::new(dispatch, start)
    },
    <e:Expr0Ty> => e,
}

pub Expr0Ty: TypedExpr = {
    <start:@L> "{" <exprs:ExprsWithSemicolonsTy> "}" => {
        let block = Expr::Block(exprs.clone());
        let line = exprs.first().map(|e| e.line).unwrap_or(start);
        TypedExpr::new(block, line)
    },
    <start:@L> "new" <typ:"typeid"> => {
        let n = Expr::New(typ.clone());
        TypedExpr::new(n, start)
    },
    <start:@L> "while" <cond:ExprTy> "loop" <body:ExprTy> "pool" => {
        let w = Expr::While { test: Box::new(cond), exec: Box::new(body) };
        TypedExpr::new(w, start)
    },
    <start:@L> "case" <expr:ExprTy> "of" <cases:CasesTy> "esac" => {
        let c = Expr::Case(Box::new(expr), cases);
        TypedExpr::new(c, start)
    },
    <start:@L> "if" <pred:ExprTy> "then" <then_expr:ExprTy> "else" <else_expr:ExprTy> "fi" => {
        let c = Expr::Conditional {
            test: Box::new(pred),
            then: Box::new(then_expr),
            orelse: Box::new(else_expr),
        };
        TypedExpr::new(c, start)
    },
    <line:@L> <name:"objectid"> => {
        let id_expr = Expr::Identifier(name.clone());
        TypedExpr::new(id_expr, line)
    },
    <line:@L> <value:"int_const"> => {
        let v = value.parse::<i32>().unwrap_or(0);
        let i_expr = Expr::Int(v);
        TypedExpr::new(i_expr, line)
    },
    <line:@L> <maybe_value:"str_const"> => {
        // removed `.unwrap()`: just clone the String
        let s = maybe_value.clone();
        let st = Expr::Str(s);
        TypedExpr::new(st, line)
    },
    <value:BoolConstTy> => {
        let b_expr = Expr::Bool(value.0);
        TypedExpr::new(b_expr, value.1)
    },
    "(" <expr:ExprTy> ")" => {
        let p = Expr::Paren(Box::new(expr.clone()));
        TypedExpr::new(p, expr.line)
    },
}

pub BoolConstTy: (bool, usize) = {
    <line:@L> <value:"bool_const"> => (value, line)
}

pub CommaSepExprsTy: Vec<TypedExpr> = {
    () => vec![],
    <some:_SomeCommaSepExprTy> => some,
}

pub _SomeCommaSepExprTy: Vec<TypedExpr> = {
    <e:ExprTy> => vec![e],
    <some:_SomeCommaSepExprTy> "," <f:ExprTy> => {
        let mut v = some;
        v.push(f);
        v
    },
}

pub ExprsWithSemicolonsTy: Vec<TypedExpr> = {
    <e:ExprTy> ";" => vec![e],
    <es:ExprsWithSemicolonsTy> <e:ExprTy> ";" => {
        let mut v = es;
        v.push(e);
        v
    },
}

pub CaseTy: CaseBranch = {
    <start:@L> <name:"objectid"> ":" <typ:"typeid"> "=>" <expr:ExprTy> ";" <end:@R> => {
        CaseBranch::new(name.clone(), typ.clone(), expr)
    }
}

pub CasesTy: Vec<CaseBranch> = {
    <c:CaseTy> => vec![c],
    <cs:CasesTy> <c:CaseTy> => {
        let mut v = cs;
        v.push(c);
        v
    },
}

pub LetBindingTy: (String, String, Option<TypedExpr>) = {
    <id:"objectid"> ":" <typ:"typeid"> => (id.clone(), typ.clone(), None),
    <id:"objectid"> ":" <typ:"typeid"> "<-" <expr:ExprTy> => (id.clone(), typ.clone(), Some(expr)),
}

pub LetBindingsTy: Vec<(String, String, Option<TypedExpr>)> = {
    <binding:LetBindingTy> => vec![binding],
    <bs:LetBindingsTy> "," <b:LetBindingTy> => {
        let mut v = bs;
        v.push(b);
        v
    },
}
